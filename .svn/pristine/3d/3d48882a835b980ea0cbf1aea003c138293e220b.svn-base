package controller;

import java.io.IOException;
import java.net.URL;
import java.util.HashSet;
import java.util.ResourceBundle;
import java.util.Set;

import Networks.ProgressBarSyn;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.Slider;
import javafx.scene.layout.Pane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.Duration;
import view.GCell;
import view.UCell;


public class MyController implements Initializable {
	
	@FXML
	private Button watchButton;
	@FXML
	private Button groupButton;
	@FXML
	private Button movieButton;
	@FXML
	private Button messageButton;
	@FXML
	private Button settingButton;
	@FXML
	private ListView GListView;
	@FXML
	private ListView UListView;
	@FXML
	private Pane leftPane;
	@FXML 
	private MediaView mediaView;
	@FXML
	private Slider timeSlider;
	@FXML
	private	Slider volumeSlider;	
	@FXML
	private Button playButton;
	
	Stage rootLayoutStage;
	MediaPlayer mp;
	
	private Set<String> gStringSet = new HashSet<String>();
	ObservableList observableList = FXCollections.observableArrayList();
	
	private Set<String> uStringSet = new HashSet<String>();
	ObservableList observableList2 = FXCollections.observableArrayList();
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
//		
//		FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("../view/RootLayout.fxml"));
//		Parent root = null;
//		try {
//			root = (Parent)fxmlLoader.load();
//		} catch (IOException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
//		rootLayoutStage = (Stage) root.getScene().getWindow();
//		fxmlLoader.setController(this);
//	    try {
//	        fxmlLoader.load();
//	    } catch (IOException e) {
//	        throw new RuntimeException(e);
//	    }
//	    

		groupButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                System.out.println("You pressed group Button.");
                MovieToGroupPane();
            }
        });
		
		movieButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                System.out.println("You pressed message Button.");
                GroupToMoviePane();
                
            }
        });
		
		setGListView();
		setUListView();
		
		//File file = new File("resources/video/VideoCat.mp4");
		//String movieURL = file.toURI().toString();
		String movieURL =  "http://download.oracle.com/otndocs/products/javafx/oow2010-2.flv";
		setMoviePlayer( movieURL);
	}
	
	protected void GroupToMoviePane() {
		leftPane.setLayoutY(-600);
		
	}

	protected void MovieToGroupPane() {
		leftPane.setLayoutY(0);		
		
	}

	void setGListView(){
		gStringSet.add("String 1");
	    gStringSet.add("String 2");
	    gStringSet.add("String 3");
	    gStringSet.add("String 4");
	    gStringSet.add("String 5");
	    gStringSet.add("String 6");
	    observableList.setAll(gStringSet);
	    GListView.setItems(observableList);
	    GListView.setCellFactory(new Callback<ListView<String>,ListCell<String>>() {
	        @Override
	        public ListCell<String> call(ListView<String> GListView) {
	            return new GCell();
	        }
	    });
	    
	    // Handle ListView selection changes.
	    // http://code.makery.ch/blog/javafx-8-event-handling-examples/
	    GListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
	        System.out.println("ListView Selection Changed (selected: " + newValue.toString() + ")");
	    });
	}
	
	void setUListView(){
		uStringSet.add("String 1");
	    uStringSet.add("String 2");
	    uStringSet.add("String 3");
	    uStringSet.add("String 4");
	    uStringSet.add("String 5");
	    uStringSet.add("String 6");
	    observableList2.setAll(uStringSet);
	    UListView.setItems(observableList2);
	    UListView.setCellFactory(new Callback<ListView<String>, ListCell<String>>() {
	        @Override
	        public ListCell<String> call(ListView<String> UListView) {
	            return new UCell();
	        }
	    });
	}
	
	void setMoviePlayer(String movieAddress){
		Media mv = new Media(movieAddress);
		MediaPlayer mp = new MediaPlayer(mv);
		mp.setAutoPlay(false);
		
        volumeSlider.setValue(80);
        mp.setVolume(0.8);
		mediaView.setMediaPlayer(mp);
		ProgressBarSyn.setProgressBar(timeSlider);
		
		mp.currentTimeProperty().addListener(new ChangeListener() {
			@Override
			public void changed(ObservableValue observable, Object oldValue,
					Object newValue) {
				
				 double currentTime = mp.getCurrentTime().toSeconds();
		          Duration duration = mp.getTotalDuration();
		          if(duration == Duration.UNKNOWN)
		        	  return;
		          timeSlider.setDisable(duration.isUnknown());
		          if (!timeSlider.isDisabled() 
		            && duration.greaterThan(Duration.ZERO) 
		            && !timeSlider.isValueChanging()) {
		              timeSlider.setValue(currentTime/duration.toSeconds()* 100.0);
		          }
			}
            });
		
		mp.volumeProperty().addListener(new ChangeListener() {
			@Override
			public void changed(ObservableValue observable, Object oldValue,
					Object newValue) {
				  
		          volumeSlider.setValue(mp.getVolume()*100.0);
			}
            });
	
		
		playButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
            	if(playButton.getText().equals("Pause")){
	                System.out.println("You pressed Pause Button.");
	                playButton.setText("Play");

	                mp.pause();
            	}else{
	                System.out.println("You pressed Play Button.");
	                playButton.setText("Pause");
	                mp.play();           		
            	}
            }
        });
		
//		timeSlider.valueProperty().addListener(new InvalidationListener() {
//		    public void invalidated(Observable ov) {
//		       if (timeSlider.isValueChanging()) {
//		       // multiply duration by percentage calculated by slider position
//		    	  Duration duration = mp.getMedia().getDuration();
//		    	  System.out.println("Duration"+duration);
//		    	  // ProgressBarSyn.setProgress(timeSlider.getValue());
//		          mp.seek(duration.multiply(timeSlider.getValue() / 100.0));
//		          System.out.println("timeslider:"+timeSlider.getValue() / 100.0);
//		       }
//		    }
//		});
		
		timeSlider.valueChangingProperty().addListener(new ChangeListener<Boolean>() {
            @Override
			public void changed(ObservableValue observable, Boolean wasChanging,
                    Boolean changing) {

                if (changing) {
                	System.out.println("Start:"+timeSlider.getValue());
                } else {
                	System.out.println("Finish:"+timeSlider.getValue());
                	Duration duration = mp.getMedia().getDuration();
                	mp.seek(duration.multiply(timeSlider.getValue() / 100.0));
                }
            }
        });
		
		volumeSlider.valueProperty().addListener(new InvalidationListener() {
		    public void invalidated(Observable ov) {
		       if(volumeSlider.isValueChanging()){
		    	   mp.setVolume(volumeSlider.getValue()/100.0);
		       }
		    }
		});
	}
	



}

//http://stackoverflow.com/questions/19588029/customize-listview-in-javafx-with-fxml
